Yarrow: Internals
=================

Roughly, the Yarrow processing pipeline is divided into two main stages:

  - Input
  - Output

The input stage starts with a path to the PHP code to document, and results in
a tree of objects representing the analyzed source code.

This tree of objects is passed to the output stage, where a generator applies
a map of files to output and supplies this context to a template converter
which is responsible for actually generating the output content.

In more detail:

  - Input
     - Map of input source files
     - Tokenize each source file
     - Parse an object tree from token stream
       - Parse docblock syntax for comment tokens
     - Append object tree for file/class to global object tree
  - Output
     - Construct generator with object tree context
     - Run generator
       - Run template converter for each output object
       - Write file to output target for each rendered template
       - Copy/render static files to output target

The main extension point is at the Generator stage.

The generator contains two template methods: getTemplateMap() and getObjectMap()
which are used to specify the set of output objects to render.

getObjectMap provides the set of individual objects to render as files, wheras
getTemplateMap provides a mapping between template files and the object index.

To render output as a single index.html file, implement an array with a single index:

class SingleFileOutputGenerator {

	/**
	 * Specifies that the 'index.tpl' template should be used to render 
	 * the 'index' object.
	 */
	function getTemplateMap() {
		return array('index' => 'index.tpl');
	}
	
	/**
	 * Specifies that the index object consists of a single file
	 * called 'index'.
	 */
	function getObjectMap() {
		return array('index' => array('index'));
	}
}

To render a matching documentation file for every PHP source file in the project:

class CodeFileOutputGenerator {

	/**
	 * Specifies that the 'file.tpl' template should be used to render 
	 * 'file' objects.
	 */
	function getTemplateMap() {
		return array('file' => 'file.tpl');
	}
	
	/**
	 * Sets the index of file objects to the list of files collected from the project.
	 */
	function getObjectMap() {
		return array('file' => $this->objectModel->getFiles());
	}
}

Rendering a documentation file for each PHP class in the project is similar:

class ClassFileOutputGenerator {

	/**
	 * Specifies that the 'file.tpl' template should be used to render 
	 * 'file' objects.
	 */
	function getTemplateMap() {
		return array('class' => 'class.tpl');
	}
	
	/**
	 * Sets the index of class objects to the list of classes collected from the project.
	 */
	function getObjectMap() {
		return array('class' => $this->objectModel->getClasses());
	}
}

These methods can be mixed and matched to build all kinds of custom documentation structures,
with the caveat that the arrays returned by getTemplateMap and getObjectMap must contain
matching indexes.

The default generators provided by Yarrow are:

  - SingleIndexGenerator
  - ClassFileGenerator
  - PEARPackageGenerator

(None of these exist yet!)

Configuration
-------------

Currently experimenting with a configuration format based on the .ini syntax, but using colons as delimiters rather than the equals symbol. Also supporting conversion to internal types for values. Currently only arrays.

[section]
property: value
property2: value

[section2]
boolean: true
list: one,two,three

Now the question has to be what actual sections and properties should be supported (so that we can validate).

If a .yarrowdoc file is not provided in the project root, and an alternative configuration is not provided,
then we should generate a base config from default settings.

 Sections:

 Meta [meta]
   The meta properties will be passed in the global context to each template.

 Input [input]
   Specify input and output patterns for file collector?
   Specify particular docblock syntax and package structure?
   Specify PHP version and particular settings on code structure (ignore properties/protected methods)

 Output [output]
   Set selected generator, template converter, and theme
   
 Helpers [helpers]
   Register helper classes and stuff with the include_path? Need to work out a definitive way for this.


Usage Sketch
------------

Usage:

 $ yarrow <input> <output> [options]

 <input>  - Path to PHP code files or an individual PHP file.
 <output> - Path to the generated documentation. If the directory does 
            not exist, it is created. If it does exist, it is 
            overwritten.

 Options

  Use -o or --option for boolean switches and --option=value or --option:value
  for options that require an explicit value to be set.

  -h    --help     [switch]   Display this help message
  -v    --version  [switch]   Display package version
  -d    --dry      [switch]   Dry run. Parses the code and gives warnings,
                              but doesnâ€™t build output.
  -p    --package  [string]   Package structure. Used to determine organization
                              of the code into packages. Must be one of the
                              following:
                                - namespace (use PHP 5.3 namespace convention)
                                - pear (use PEAR package naming conventions)
                                - tags (use @package and @subpackage tags)
                                - folder (treat directories as package names)
                                - none (do not group code into packages)
  -t    --template [string]   Output templates to use.
  -


yarrow 

Doc Comment Styles
------------------

##
# Function name
# - Public
# - Something else
#
function doSomethingElse() {
}

// This is a comment about something.
// 
// This is a comment description that goes on for longer and longer.
// This is a comment description that goes on for longer and longer.
// This is a comment description that goes on for longer and longer.
//
function doSomething() {
}

/**
 * A docblock (we all know what these are)
 *
 * @annotation value
 * @anotherAnnotation value
 */
function doSomethingFast() {
}

/*==================================================
FOUND THIS STYLE USED IN SOME PARTICLETREE.COM CODE
====================================================*/
function doSomethingElse() {
}

Note: make sure docblocks operate independently of whitespace, eg:

/**
 * A docblock with line breaks in-front of the method declaration
 */

function doSomethingFast() {
}


List of all tags supported by phpDocumentor
-------------------------------------------

@abstract
@access
@author
@category
@copyright
@deprecated
@example
@final
@filesource
@global
@ignore
@internal
@license
@link
@method
@name
@package
@param
@property
@return
@see
@since
@static
@staticvar
@subpackage
@todo
@tutorial
@uses
@var
@version

Inline tags
-----------

inline {@example}
inline {@id}
inline {@internal}}
inline {@inheritdoc}
inline {@link}
inline {@source}
inline {@toc}
inline {@tutorial}

References
----------

Giriprasad Sridhara, Emily Hill, Divya Muppaneni, Lori Pollock, and K. Vijay-Shanker. 2010. Towards automatically generating summary comments for Java methods. In Proceedings of the IEEE/ACM international conference on Automated software engineering (ASE '10). ACM, New York, NY, USA, 43-52. DOI=10.1145/1858996.1859006 http://doi.acm.org/10.1145/1858996.1859006

- Possible Google Summer of Code Project?

