Yarrow: Internals
=================

The intention is to build the documentation generator from the following three main components:

- Parser/Collector
- Object Model
- Output Converter

Processing a PHP library should require roughly the following steps:

1. Start at root directory of library
2. Collect all *.php files within that directory
3. Analyze the token stream of each PHP file
   - build an object for each class
   - build an object for each method in each class
   - register all docblocks applying to each class and method
4. Feed the tree of analyzed objects to the output converter
5. Generate HTML template files to output directory

Usage Sketch
------------

Usage:

 $ yarrow <input> <output> [options]

 <input>  - Path to PHP code files or an individual PHP file.
 <output> - Path to the generated documentation. If the directory does 
            not exist, it is created. If it does exist, it is 
            overwritten.

 Options

  Use -o or --option for boolean switches and --option=value or --option:value
  for options that require an explicit value to be set.

  -h    --help     [switch]   Display this help message
  -v    --version  [switch]   Display package version
  -d    --dry      [switch]   Dry run. Parses the code and gives warnings,
                              but doesnâ€™t build output.
  -p    --package  [string]   Package structure. Used to determine organization
                              of the code into packages. Must be one of the
                              following:
                                - namespace (use PHP 5.3 namespace convention)
                                - pear (use PEAR package naming conventions)
                                - tags (use @package and @subpackage tags)
                                - folder (treat directories as package names)
                                - none (do not group code into packages)
  -t    --template [string]   Output templates to use.
  -


yarrow 

Questions
---------

Should the token analyzer be run as the collector processes a file, or should the files be
collected then the tokens analyzed separately?

PHP 5.3 compatibility
---------------------

- Add new token signatures
- Anonymous functions?

Doc Comment Styles
------------------

##
# Function name
# - Public
# - Something else
#
function doSomethingElse() {
}

// This is a comment about something.
// 
// This is a comment description that goes on for longer and longer.
// This is a comment description that goes on for longer and longer.
// This is a comment description that goes on for longer and longer.
//
function doSomething() {
}

/**
 * A docblock (we all know what these are)
 *
 * @annotation value
 * @anotherAnnotation value
 */
function doSomethingFast() {
}

List of all tags supported by phpDocumentor
-------------------------------------------

@abstract
@access
@author
@category
@copyright
@deprecated
@example
@final
@filesource
@global
@ignore
@internal
@license
@link
@method
@name
@package
@param
@property
@return
@see
@since
@static
@staticvar
@subpackage
@todo
@tutorial
@uses
@var
@version

Inline tags
-----------

inline {@example}
inline {@id}
inline {@internal}}
inline {@inheritdoc}
inline {@link}
inline {@source}
inline {@toc}
inline {@tutorial}

References
----------

Giriprasad Sridhara, Emily Hill, Divya Muppaneni, Lori Pollock, and K. Vijay-Shanker. 2010. Towards automatically generating summary comments for Java methods. In Proceedings of the IEEE/ACM international conference on Automated software engineering (ASE '10). ACM, New York, NY, USA, 43-52. DOI=10.1145/1858996.1859006 http://doi.acm.org/10.1145/1858996.1859006
